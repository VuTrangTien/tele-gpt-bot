import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from openai import OpenAI
import os
import openai

# Thi·∫øt l·∫≠p log
logging.basicConfig(level=logging.INFO)

# API Key OpenAI v√† Telegram
TELEGRAM_TOKEN = '8139700391:AAG4UbMwrIhHbWRphlHgo-ewufXj3rDhAbw'
OPENAI_API_KEY = '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'
client = OpenAI(api_key=OPENAI_API_KEY)

# Vai tr√≤ m·∫∑c ƒë·ªãnh
default_role = "B·∫°n l√† tr·ª£ l√Ω AI h·ªó tr·ª£ ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Vi·ªát, tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu."
user_roles = {}  # L∆∞u vai tr√≤ theo chat_id

# X·ª≠ l√Ω c√°c l·ªánh ƒë·ªïi vai tr√≤
async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    cmd = update.message.text

    roles = {
        "/en_tutor": "B·∫°n l√† gi√°o vi√™n ti·∫øng Anh, s·ª≠a l·ªói b√†i vi·∫øt, gi·∫£i th√≠ch ng·ªØ ph√°p chi ti·∫øt.",
        "/pm_expert": "B·∫°n l√† chuy√™n gia qu·∫£n l√Ω d·ª± √°n ph·∫ßn m·ªÅm, t∆∞ v·∫•n v·ªÅ Hybrid, Waterfall, Agile, Scrum, estimation v√† qu·∫£n l√Ω nh√≥m k·ªπ thu·∫≠t.",
        "/reset": default_role
    }

    if cmd in roles:
        user_roles[chat_id] = roles[cmd]
        await update.message.reply_text(f"‚úÖ ƒê√£ chuy·ªÉn vai tr√≤ bot sang: {cmd[1:]}")
    else:
        await update.message.reply_text("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá.")

# X·ª≠ l√Ω tin nh·∫Øn ng∆∞·ªùi d√πng
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = update.effective_chat.id
    print(f"üì© Ng∆∞·ªùi d√πng nh·∫Øn: {user_message}")

    role = user_roles.get(chat_id, default_role)

    try:
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": role},
                {"role": "user", "content": user_message},
            ]
        )

        reply = response.choices[0].message.content
        await update.message.reply_text(reply)

    except openai.RateLimitError as e:
        print("‚ùå L·ªói quota:", e)
        await update.message.reply_text("üö´ Bot ƒë√£ h·∫øt quota s·ª≠ d·ª•ng API. Vui l√≤ng n·∫°p th√™m ƒë·ªÉ ti·∫øp t·ª•c.")

    except Exception as e:
        print("‚ùå L·ªói khi g·ªçi OpenAI:", e)
        await update.message.reply_text("‚ö†Ô∏è Xin l·ªói! Bot ƒëang g·∫∑p s·ª± c·ªë khi g·ªçi ChatGPT.")

# Kh·ªüi ƒë·ªông bot
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler(["en_tutor", "pm_expert", "reset"], set_role))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ Bot ƒëang ch·∫°y...")
    app.run_polling()

if __name__ == "__main__":
    main()