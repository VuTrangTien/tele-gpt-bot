import logging
import os
import tempfile
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from telegram.constants import ChatAction
from openai import OpenAI
import openai
from docx import Document
from pptx import Presentation
import pandas as pd
import fitz  # PyMuPDF
from io import BytesIO 


# Thi·∫øt l·∫≠p log
logging.basicConfig(level=logging.INFO)

# L·∫•y bi·∫øn m√¥i tr∆∞·ªùng
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY") 

# In ra ƒë·ªÉ debug
print("TELEGRAM_TOKEN =", TELEGRAM_TOKEN)
print("OPENAI_API_KEY =", OPENAI_API_KEY)

# Kh·ªüi t·∫°o client
client = OpenAI(api_key=OPENAI_API_KEY)

# Vai tr√≤ m·∫∑c ƒë·ªãnh
user_roles = {}
default_role = "B·∫°n l√† tr·ª£ l√Ω AI h·ªó tr·ª£ ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Vi·ªát, tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu."

# B·ªô nh·ªõ t·∫°m l∆∞u file s·ª≠a n·ªôi dung
edited_files = {}

# ========================= HANDLERS ===============================

async def set_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    cmd = update.message.text

    roles = {
        "/tutor": "B·∫°n l√† gi√°o vi√™n ti·∫øng Anh, chuy√™n s·ª≠a l·ªói b√†i vi·∫øt, gi·∫£i th√≠ch ng·ªØ ph√°p v√† vƒÉn phong.",
        "/pm": "B·∫°n l√† chuy√™n gia qu·∫£n l√Ω d·ª± √°n ph·∫ßn m·ªÅm (PMP, PMI), t∆∞ v·∫•n hybrid, agile, waterfall, estimation...",
        "/ba": "B·∫°n l√† Business Analyst, chuy√™n t·∫°o/review BRD, FSD, RFQ, RFP, Diagram, ch·ªânh format, ng·ªØ ph√°p, ph√°t tri·ªÉn √Ω.",
        "/sa": "B·∫°n l√† chuy√™n gia ki·∫øn tr√∫c h·ªá th·ªëng (System Architect), thi·∫øt k·∫ø h·ªá th·ªëng scalable, fault-tolerant.",
        "/reset": default_role
    }

    if cmd in roles:
        user_roles[chat_id] = roles[cmd]
        await update.message.reply_text(f"‚úÖ ƒê√£ chuy·ªÉn vai tr√≤ bot sang: {cmd[1:]}")
    else:
        await update.message.reply_text("‚ùå L·ªánh kh√¥ng h·ª£p l·ªá.")

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    role = user_roles.get(chat_id, default_role)
    user_message = update.message.text

    await update.message.chat.send_action(action=ChatAction.TYPING)

    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": role},
                {"role": "user", "content": user_message},
            ]
        )
        reply = response.choices[0].message.content
        await update.message.reply_text(reply)

    except openai.RateLimitError:
        await update.message.reply_text("üö´ Bot ƒë√£ h·∫øt quota API. Vui l√≤ng n·∫°p th√™m ƒë·ªÉ ti·∫øp t·ª•c.")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è Bot l·ªói: {str(e)}")

# ========================= FILE HANDLING =========================

def highlight_diff(original, edited):
    # V·ªõi vƒÉn b·∫£n ƒë√£ ch·ªânh s·ª≠a, highlight ph·∫ßn kh√°c b·∫±ng m√†u ƒë·ªè
    return f"\n[Tr∆∞·ªõc]\n{original}\n\n[Sau]\n<font color=red>{edited}</font>"

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    role = user_roles.get(chat_id, default_role)

    file = update.message.document or update.message.effective_attachment
    file_name = file.file_name
    new_name = f"edited_{file_name}"
    file_obj = await file.get_file()
    file_bytes = await file_obj.download_as_bytearray()

    with tempfile.NamedTemporaryFile(delete=False) as tmp:
        tmp.write(file_bytes)
        tmp_path = tmp.name

    # ƒê·ªçc n·ªôi dung file
    content = ""
    try:
        if file_name.endswith(".docx"):
            doc = Document(tmp_path)
            content = "\n".join([p.text for p in doc.paragraphs if p.text.strip()])
        elif file_name.endswith(".pdf"):
            doc = fitz.open(tmp_path)
            content = "\n".join([page.get_text() for page in doc])
        elif file_name.endswith(".xlsx"):
            df = pd.read_excel(tmp_path)
            content = df.to_string()
        elif file_name.endswith(".pptx"):
            ppt = Presentation(tmp_path)
            content = "\n".join([shape.text for slide in ppt.slides for shape in slide.shapes if hasattr(shape, "text")])
        elif file_name.endswith(".drawio"):
            with open(tmp_path, "r", encoding="utf-8") as f:
                content = f.read()
        else:
            await update.message.reply_text("üìÅ ƒê·ªãnh d·∫°ng ch∆∞a h·ªó tr·ª£.")
            return
    except Exception as e:
        await update.message.reply_text(f"‚ùå L·ªói ƒë·ªçc file: {str(e)}")
        return

    # G·ª≠i n·ªôi dung ƒëi ƒë·ªÉ ch·ªânh s·ª≠a b·∫±ng OpenAI
    await update.message.chat.send_action(action=ChatAction.TYPING)
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": f"{role}\nH√£y s·ª≠a l·ªói, m·ªü r·ªông √Ω v√† tr·∫£ k·∫øt qu·∫£ d·∫°ng plain text."},
                {"role": "user", "content": content},
            ]
        )
        edited_content = response.choices[0].message.content
        reply_preview = highlight_diff(content[:500], edited_content[:500])  # Preview ƒëo·∫°n ƒë·∫ßu
        await update.message.reply_text(reply_preview, parse_mode="HTML")

        # L∆∞u ƒë·ªÉ g·ª≠i l·∫°i khi ng∆∞·ªùi d√πng y√™u c·∫ßu
        edited_files[chat_id] = (file_name, edited_content)
        await update.message.reply_text("‚úÖ So·∫°n th·∫£o xong. G√µ /sendfile ƒë·ªÉ nh·∫≠n file ƒë√£ ch·ªânh.")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω: {str(e)}")

async def sendfile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id not in edited_files:
        await update.message.reply_text("‚ùó Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªânh g·∫ßn ƒë√¢y.")
        return

    file_name, edited_content = edited_files[chat_id]
    out_stream = BytesIO()

    # Xu·∫•t l·∫°i ƒë√∫ng ƒë·ªãnh d·∫°ng
    if file_name.endswith(".docx"):
        doc = Document()
        doc.add_paragraph(edited_content)
        doc.save(out_stream)
    elif file_name.endswith(".pdf"):
        pdf = fitz.open()
        page = pdf.new_page()
        page.insert_text((72, 72), edited_content)
        pdf.save(out_stream)
    elif file_name.endswith(".xlsx"):
        df = pd.DataFrame([[line] for line in edited_content.split("\n")])
        with pd.ExcelWriter(out_stream, engine="xlsxwriter") as writer:
            df.to_excel(writer, index=False, header=False)
    elif file_name.endswith(".pptx"):
        prs = Presentation()
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        slide.shapes.title.text = "AI Revised Content"
        slide.placeholders[1].text = edited_content[:1000]
        prs.save(out_stream)
    elif file_name.endswith(".drawio"):
        out_stream.write(edited_content.encode("utf-8"))
    else:
        await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ xu·∫•t ƒë·ªãnh d·∫°ng n√†y.")
        return

    out_stream.seek(0)
    await update.message.reply_document(InputFile(out_stream, filename=f"edited_{file_name}"))

# =========================== MAIN ==============================

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler(["tutor", "pm", "ba", "sa", "reset"], set_role))
    app.add_handler(CommandHandler("sendfile", sendfile))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("ü§ñ Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
